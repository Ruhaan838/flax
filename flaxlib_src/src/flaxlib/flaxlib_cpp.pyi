# Copyright 2024 The Flax Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import Any, Iterator

def sum_as_string(a: int, b: int) -> str: ...

def create_index_ref(
  ref_index: RefIndexMapping, index_mapping: IndexMapping
) -> IndexRefMapping: ...

class IndexMapping:
  def __init__(self, mapping: dict[int, int], /) -> None: ...
  def __hash__(self) -> int: ...
  def __getitem__(self, key: int) -> int: ...
  def __len__(self) -> int: ...
  def __contains__(self, key: int) -> bool: ...
  def __iter__(self) -> Iterator[int]: ...
  def items(self) -> Iterator[tuple[int, int]]: ...

class RefIndexMapping:
  def __init__(self, ref_mapping: dict[Any, int], /) -> None: ...
  def __getitem__(self, key: Any) -> int: ...
  def __contains__(self, key: Any) -> bool: ...
  def __setitem__(self, key: Any, value: int) -> None: ...
  def __delitem__(self, key: Any) -> None: ...
  def __iter__(self) -> Iterator[Any]: ...
  def __len__(self) -> int: ...
  def items(self) -> Iterator[tuple[Any, int]]: ...

class IndexRefMapping:
  def __init__(self, mapping: dict[int, Any], /) -> None: ...
  def __getitem__(self, key: int) -> Any: ...
  def __contains__(self, key: int) -> bool: ...
  def __setitem__(self, key: int, value: Any) -> None: ...
  def __delitem__(self, key: int) -> None: ...
  def __iter__(self) -> Iterator[int]: ...
  def __len__(self) -> int: ...
  def items(self) -> Iterator[tuple[int, Any]]: ...

def _graph_flatten_top(ref_index: RefIndexMapping, node: Any) -> Any: ...
def _graph_flatten(
  path: list, ref_index: RefIndexMapping, flat_state: list, node: Any
) -> Any: ...
